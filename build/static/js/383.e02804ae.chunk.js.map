{"version":3,"file":"static/js/383.e02804ae.chunk.js","mappings":"8LAmCA,EAjCoB,SAAH,GAA8D,IAAxDA,EAAc,EAAdA,eAAgBC,EAAQ,EAARA,SAAUC,EAAQ,EAARA,SAAUC,EAAY,EAAZA,aAKnDC,EAAa,SAACC,GAClB,GAAIA,IAASC,MAAMD,GAAO,CACxB,IAAME,EAAUC,KAAKC,MAAMJ,EAAO,IAC5BK,EAAgBH,EAAU,GAAE,WAAOA,GAAO,UAAQA,GAClDI,EAAUH,KAAKC,MAAMJ,EAAO,IAC5BO,EAAgBD,EAAU,GAAE,WAAOA,GAAO,UAAQA,GACxD,MAAM,GAAN,OAAUD,EAAa,YAAIE,EAC7B,CACA,MAAO,OACT,EAEA,OACE,iCACE,iBAAKC,UAAU,WAAU,UACtBT,EAAWD,GAAc,IAAEC,EAAWF,OAEzC,kBACEW,UAAU,WACVC,KAAK,QACLC,IAAKf,EACLgB,aAAa,IACbC,SAzBuB,WAC3BhB,EAASiB,QAAQC,YAAcnB,EAAekB,QAAQE,KACxD,EAwBMC,QAAS,SAACC,GAAC,OAAKA,EAAEC,iBAAiB,MAI3C,ECsBA,EApDoB,SAAH,GAA0C,IAApCC,EAAG,EAAHA,IAAKC,EAAS,EAATA,UAAWC,EAAY,EAAZA,aAC/BzB,GAAW0B,EAAAA,EAAAA,UACX3B,GAAiB2B,EAAAA,EAAAA,UACvB,GAAgCC,EAAAA,EAAAA,UAAS,GAAE,eAApC1B,EAAQ,KAAE2B,EAAW,KAC5B,GAAwCD,EAAAA,EAAAA,UAAS,GAAE,eAA5CzB,EAAY,KAAE2B,EAAe,KAE9BC,GAAmBJ,EAAAA,EAAAA,UAQnBK,GAASC,EAAAA,EAAAA,cAAY,WACzB,IAAMd,EAAclB,EAASiB,QAAQC,YACrCW,EAAgBX,GAChBnB,EAAekB,QAAQE,MAAQD,EAC/BnB,EAAekB,QAAQgB,MAAMC,YAC3B,mBAAmB,GAAD,OACdnC,EAAekB,QAAQE,MAAQlB,EAAY,IAAG,MAGpD6B,EAAiBb,QAAUkB,sBAAsBJ,EACnD,GAAG,CAAC/B,EAAUC,EAAUF,EAAgB8B,KAExCO,EAAAA,EAAAA,YAAU,WACJZ,EACFxB,EAASiB,QAAQoB,OAEjBrC,EAASiB,QAAQqB,QAEnBR,EAAiBb,QAAUkB,sBAAsBJ,EACnD,GAAG,CAACP,EAAWxB,EAAU+B,IAMzB,OACE,iCACE,kBACEjB,IAAKd,EACLuB,IAAKC,EAAYD,EAAM,KACvBgB,QATU,WACdd,GAAa,EACf,EAQMe,iBArCmB,WACvB,IAAM9B,EAAUV,EAASiB,QAAQhB,SACjC2B,EAAYlB,GACZX,EAAekB,QAAQwB,IAAM/B,CAC/B,KAmCI,SAAC,EAAW,CAAOX,eAAAA,EAAgBC,SAAAA,EAAUC,SAAAA,EAAUC,aAAAA,MAG7D,C","sources":["components/UI/AudioPlayer/ProgressBar.jsx","components/UI/AudioPlayer/AudioPlayer.jsx"],"sourcesContent":["import './ProgressBar.scss';\r\n\r\nconst ProgressBar = ({ progressBarRef, audioRef, duration, timeProgress }) => {\r\n  const handleProgressChange = () => {\r\n    audioRef.current.currentTime = progressBarRef.current.value;\r\n  };\r\n\r\n  const formatTime = (time) => {\r\n    if (time && !isNaN(time)) {\r\n      const minutes = Math.floor(time / 60);\r\n      const formatMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\r\n      const seconds = Math.floor(time % 60);\r\n      const formatSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;\r\n      return `${formatMinutes}:${formatSeconds}`;\r\n    }\r\n    return '00:00';\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"progress\">\r\n        {formatTime(timeProgress)}/{formatTime(duration)}\r\n      </div>\r\n      <input\r\n        className=\"play-bar\"\r\n        type=\"range\"\r\n        ref={progressBarRef}\r\n        defaultValue=\"0\"\r\n        onChange={handleProgressChange}\r\n        onClick={(e) => e.stopPropagation()}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import { useEffect, useState, useRef, useCallback } from 'react';\r\nimport ProgressBar from './ProgressBar';\r\n\r\nconst AudioPlayer = ({ src, isPlaying, setIsPlaying }) => {\r\n  const audioRef = useRef();\r\n  const progressBarRef = useRef();\r\n  const [duration, setDuration] = useState(0);\r\n  const [timeProgress, setTimeProgress] = useState(0);\r\n\r\n  const playAnimationRef = useRef();\r\n\r\n  const onLoadedMetadata = () => {\r\n    const seconds = audioRef.current.duration;\r\n    setDuration(seconds);\r\n    progressBarRef.current.max = seconds;\r\n  };\r\n\r\n  const repeat = useCallback(() => {\r\n    const currentTime = audioRef.current.currentTime;\r\n    setTimeProgress(currentTime);\r\n    progressBarRef.current.value = currentTime;\r\n    progressBarRef.current.style.setProperty(\r\n      '--range-progress',\r\n      `${(progressBarRef.current.value / duration) * 100}%`\r\n    );\r\n\r\n    playAnimationRef.current = requestAnimationFrame(repeat);\r\n  }, [audioRef, duration, progressBarRef, setTimeProgress]);\r\n\r\n  useEffect(() => {\r\n    if (isPlaying) {\r\n      audioRef.current.play();\r\n    } else {\r\n      audioRef.current.pause();\r\n    }\r\n    playAnimationRef.current = requestAnimationFrame(repeat);\r\n  }, [isPlaying, audioRef, repeat]);\r\n\r\n  const onEnded = () => {\r\n    setIsPlaying(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <audio\r\n        ref={audioRef}\r\n        src={isPlaying ? src : null}\r\n        onEnded={onEnded}\r\n        onLoadedMetadata={onLoadedMetadata}\r\n      ></audio>\r\n      <ProgressBar {...{ progressBarRef, audioRef, duration, timeProgress }} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AudioPlayer;\r\n"],"names":["progressBarRef","audioRef","duration","timeProgress","formatTime","time","isNaN","minutes","Math","floor","formatMinutes","seconds","formatSeconds","className","type","ref","defaultValue","onChange","current","currentTime","value","onClick","e","stopPropagation","src","isPlaying","setIsPlaying","useRef","useState","setDuration","setTimeProgress","playAnimationRef","repeat","useCallback","style","setProperty","requestAnimationFrame","useEffect","play","pause","onEnded","onLoadedMetadata","max"],"sourceRoot":""}